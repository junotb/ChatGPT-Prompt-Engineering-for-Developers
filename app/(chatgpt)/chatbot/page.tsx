const Chatbot = () => {
  return (
    <div className="flex items-center justify-center w-full h-full p-6">
      <div className="w-full h-full pr-2 overflow-y-scroll">
        대형 언어 모델의 흥미로운 점 중 하나는 노력을 들이지 않고도 사용자 정의 챗봇을 만들 수 있다는 것입니다.<br />
        ChatGPT는 웹 인터페이스로, 대형 언어 모델을 통해 대화형 인터페이스를 제공합니다.<br />
        그러나 멋진 점 중 하나는 대형 언어 모델을 사용하여 AI 고객 서비스 대리인이나 레스토랑 주문 수령기와 같은 사용자 정의 챗봇을 만들 수 있다는 것입니다.<br />
        이 비디오에서는 직접 그렇게 하는 방법을 배우게 될 것입니다.<br />
        OpenAI 챗 완성 형식의 구성 요소를 자세히 설명한 후 챗봇을 만들어 보겠습니다.<br />
        그러니 시작해봅시다.<br />
        먼저 OpenAI Python 패키지를 설정하겠습니다.<br /><br />
        ChatGPT와 같은 챗 모델은 사실 입력으로 일련의 메시지를 받아들이고 모델이 생성한 메시지를 출력으로 반환하도록 훈련되었습니다.<br />
        따라서 챗 형식은 이와 같은 다중 턴 대화를 쉽게 만들기 위해 설계되었지만, 이전 비디오에서 보았듯이 대화가 없는 단일 턴 작업에도 동일하게 유용합니다.<br />
        다음으로 두 개의 도우미 함수를 정의하겠습니다.<br />
        이것은 이전 모든 비디오에서 사용한 &quot;get_completion&quot; 함수입니다.<br />
        그러나 조금 살펴보면, 우리는 프롬프트를 제공하지만 함수 내부에서 실제로 하는 일은 이 프롬프트를 사용자 메시지와 같은 것으로 넣는 것입니다.<br />
        이는 ChatGPT 모델이 챗 모델이기 때문에 입력으로 일련의 메시지를 받아들이고 모델이 생성한 메시지를 반환하기 때문입니다.<br />
        따라서 사용자 메시지가 입력이고, 어시스턴트 메시지가 출력입니다.<br /><br />
        이 비디오에서는 실제로 다른 도우미 함수를 사용하고, 단일 프롬프트를 입력으로 사용하여 단일 완성을 얻는 대신 메시지 목록을 전달할 것입니다.<br />
        이러한 메시지는 다양한 역할에서 올 수 있습니다.<br />
        이를 설명하겠습니다.<br />
        메시지 목록의 예시가 여기 있습니다.<br />
        첫 번째 메시지는 전반적인 지시 사항을 제공하는 시스템 메시지이며, 이 메시지 이후에는 사용자와 도우미 간의 대화가 이어집니다.<br />
        이는 계속해서 진행될 것입니다.<br />
        ChatGPT 웹 인터페이스를 사용한 적이 있다면, 여러분의 메시지는 사용자 메시지이고 ChatGPT의 메시지는 도우미 메시지입니다.<br />
        시스템 메시지는 도우미의 행동과 페르소나를 설정하는 데 도움이 되며, 대화에 대한 고수준의 지시 사항 역할을 합니다.<br />
        도우미의 귓속말처럼 생각할 수 있으며, 사용자는 시스템 메시지를 인식하지 못한 채 도우미의 응답을 이끌어낼 수 있습니다.<br />
        ChatGPT를 사용한 사용자라면, ChatGPT의 시스템 메시지에 대해 알지 못할 것입니다.<br />
        시스템 메시지의 장점은 대화 자체를 대화의 일부로 만들지 않고 대화를 구성하는 방법을 개발자에게 제공한다는 것입니다.<br />
        따라서 사용자가 인식하지 못하게 도우미를 안내하고 응답을 이끌어낼 수 있습니다.<br /><br />
        그래서 이제 이 메시지들을 대화에서 사용해 보겠습니다.<br />
        그래서 메시지에서 완성을 얻기 위해 새로운 도우미 함수를 사용할 것입니다.<br />
        그리고 더 높은 온도를 사용하고 있습니다.<br />
        그래서 시스템 메시지는 &quot;당신은 셰익스피어처럼 말하는 어시스턴트입니다&quot;라고 말합니다.<br />
        이는 우리가 어시스턴트에게 어떻게 행동해야 하는지 설명하는 것입니다.<br />
        그리고 첫 번째 사용자 메시지는 &quot;농담 좀 해줘&quot;입니다.<br />
        다음은 &quot;닭이 길을 건너는 이유가 뭔가요?&quot;입니다.<br />
        그리고 마지막 사용자 메시지는 &quot;모르겠어요&quot;입니다.<br />
        그래서 이를 실행하면 응답은 &quot;다른 쪽으로 가기 위해서&quot;입니다.<br />
        다시 한 번 해보죠.<br />
        &quot;다른 쪽으로 가기 위해서, 공정한 신사 혹은 여인&quot;입니다.<br />
        이것은 오래된 클래식이며 절대 실패하지 않습니다.<br />
        그래서 이것이 우리의 셰익스피어식 응답입니다.<br />
        그리고 실제로 한 가지 더 해보죠.<br />
        왜냐하면 이것이 어시스턴트 메시지임을 더 명확하게 하고 싶기 때문입니다.<br />
        그래서 여기서 우리는 그냥 전체 메시지 응답을 출력해 보겠습니다.<br />
        그래서 이를 더 명확하게 만들기 위해서입니다.<br />
        이 응답은 어시스턴트 메시지입니다.<br />
        그래서 역할은 어시스턴트이고, 내용은 메시지 자체입니다.<br />
        이것이 도우미 함수에서 일어나는 일입니다.<br />
        그래서 이제 다른 예제를 해보겠습니다.<br />
        여기서 우리의 메시지는 시스템 메시지가 &quot;친근한 챗봇입니다&quot;이고, 첫 번째 사용자 메시지는 &quot;안녕, 내 이름은 이사야&quot;입니다.<br />
        그리고 첫 번째 어시스턴트 메시지를 얻고 싶습니다.<br />
        그래서 이를 실행하면 첫 번째 메시지는 &quot;안녕 이사야! 만나서 반가워요.<br />
        오늘은 어떻게 도와드릴까요?&quot;입니다.<br />
        이제 다른 예제를 해보죠.<br />
        여기서 우리의 메시지는 시스템 메시지가 &quot;친근한 챗봇입니다&quot;이고, 첫 번째 사용자 메시지는 &quot;네, 제 이름이 뭐였더라고요?&quot;입니다.<br />
        그리고 응답을 얻어봅시다.<br />
        그리고 보시다시피, 모델은 실제로 제 이름을 모르고 있습니다.<br />
        그래서 언어 모델과의 각 대화는 독립적인 상호작용이며, 현재 대화에서 모델이 참고할 수 있는 모든 관련 메시지를 제공해야 한다는 것을 의미합니다.<br /><br />
        모델이 대화의 이전 부분을 그리거나 인용하여 기억하도록 하려면 모델에 입력으로 이전 교환을 제공해야 합니다.<br />
        그래서 이를 &quot;컨텍스트&quot;라고 부릅니다.<br />
        그러니 이렇게 해보죠.<br />
        이제 우리는 모델이 필요로 하는 컨텍스트인 이전 메시지에서 내 이름을 제공했고, 같은 질문을 할 것이므로 내 이름이 무엇인지 물어봅니다.<br />
        모델은 모든 컨텍스트를 가지고 있기 때문에 응답할 수 있습니다.<br />
        이런 종류의 메시지 목록을 입력으로 제공합니다.<br />
        이제 여러분은 자신만의 챗봇을 만들어 볼 차례입니다.<br />
        이 챗봇은 &quot;OrderBot&quot;이라고 불리며, 사용자 프롬프트와 보조 응답을 자동화하여 이 &quot;OrderBot&quot;을 구축할 것입니다.<br />
        이 챗봇은 피자 가게에서 주문을 받을 것이며, 먼저 이 도우미 함수를 정의할 것입니다.<br />
        이 함수는 사용자 메시지를 수집하여 위에서 한 것처럼 수동으로 입력하는 것을 피할 수 있도록 하며, 아래에서 구축할 사용자 인터페이스에서 프롬프트를 수집한 다음 &quot;context&quot;라는 목록에 추가하고 해당 컨텍스트로 모델을 호출합니다.<br />
        그리고 모델의 응답도 컨텍스트에 추가됩니다.<br />
        따라서 모델 메시지가 컨텍스트에 추가되고 사용자 메시지가 컨텍스트에 추가되는 식으로 계속 길어집니다.<br />
        이렇게 하면 모델이 다음에 무엇을 해야 할지 결정하는 데 필요한 정보를 가지게 됩니다.<br />
        이제 UI를 설정하고 실행하여 Autobot을 표시해 보겠습니다.<br />
        여기에는 시스템 메시지가 포함된 컨텍스트가 있습니다.<br />
        각각의 언어 모델을 호출할 때마다 동일한 컨텍스트를 사용하고 컨텍스트는 시간이 지남에 따라 누적됩니다.<br />
        그럼 이제 실행해 보겠습니다.<br />
        &quot;안녕, 피자를 주문하고 싶어요&quot;라고 말할게요.<br />
        그리고 보조 응답은 &quot;좋아요, 어떤 피자를 주문하시겠어요? 페퍼로니, 치즈, 가지 피자가 있습니다.&quot;라고 말합니다.<br />
        음.<br />
        &quot;얼마인가요?&quot; 좋아요, 가격을 알려드릴게요.<br />
        저는 중간 사이즈의 가지 피자가 좋을 것 같아요.<br />
        상상하실 수 있듯이 이 대화를 계속할 수 있습니다.<br />
        그리고 시스템 메시지에 무엇을 넣었는지 살펴보겠습니다.<br />
        &quot;Autobot은 피자 가게 주문을 수집하기 위한 자동화된 서비스입니다.<br />
        먼저 고객에게 인사를 하고 주문을 받은 다음 픽업인지 배달인지 물어봅니다.<br />
        전체 주문을 받을 때까지 기다린 다음 요약하고 고객이 더 추가할 것이 있는지 마지막으로 확인합니다.<br />
        배달인 경우 주소를 물어볼 수 있습니다.<br />
        마지막으로 결제를 받습니다.<br />
        메뉴에서 옵션, 추가품 및 크기를 명확히 해서 메뉴 항목을 고유하게 식별하세요.<br />
        매우 대화 형식적이고 친근한 스타일로 응답하세요.<br />
        메뉴에는 다음이 포함됩니다.&quot; 그리고 여기에 메뉴가 있습니다.<br />
        그러니 대화로 돌아가서 보조 응답이 지시에 따라 잘 따라왔는지 확인해 보겠습니다.<br />
        좋아요, 보조 응답은 우리가 시스템 메시지에서 지정한 토핑을 원하는지 물어봅니다.<br />
        그래서 저희는 추가 토핑을 원하지 않습니다.<br />
        그럼 &quot;주문하실 다른 것이 있으신가요?&quot;라고 물어봅니다.<br />
        물을 주문해주세요.<br />
        사실, 감자 튀김도 주문할게요.<br />
        작은 거나 큰 거요? 이것은 좋은 점입니다.<br />
        시스템 메시지에서 보조 응답에게 추가품과 사이드를 명확히 하도록 요청했기 때문입니다.<br />
        이런 식으로 계속됩니다.<br />
        여러분은 자유롭게 이를 직접 사용해 보세요.<br />
        비디오를 일시 정지하고 왼쪽의 노트북에서 직접 실행할 수 있습니다.<br />
        그러니 이제 대화에 기반한 주문 시스템에 보낼 수 있는 JSON 요약을 모델에 생성하도록 요청할 수 있습니다.<br />
        이제 이전 음식 주문에 대한 지시를 나타내는 다른 시스템 메시지를 추가하고 있으며, &quot;이전 음식 주문에 대한 JSON 요약을 작성하세요.<br />
        각 항목의 가격을 세분화하세요.<br />
        필드는 1) 피자, 사이드 포함, 2) 토핑 목록, 3) 음료 목록, 4) 사이드 목록 및 최종 가격이어야 합니다.&quot;라고 말하고 있습니다.<br />
        여기에 사용자 메시지를 사용할 수도 있습니다.<br />
        이것은 시스템 메시지일 필요는 없습니다.<br /><br />
        그래서, 이걸 실행해 봅시다.<br />
        그리고 주목하세요, 이 경우에는 낮은 온도를 사용하고 있습니다.<br />
        이런 종류의 작업에서는 출력이 예측 가능하도록 하기 위해 낮은 온도를 사용합니다.<br />
        대화형 에이전트의 경우, 더 높은 온도를 사용할 수도 있습니다.<br />
        하지만 이 경우에도 고객의 보조 챗봇으로서, 출력이 조금 더 예측 가능하도록 낮은 온도를 사용할 수도 있습니다.<br />
        그래서, 여기에 주문 요약이 있습니다.<br />
        그리고, 원한다면 이것을 주문 시스템에 제출할 수도 있습니다.<br />
        그렇게 해서, 여러분은 여러분만의 주문 챗봇을 만들었습니다.<br />
        자유롭게 사용자 정의하여 즐겁게 시스템 메시지를 변경하고, 다른 지식을 가진 다른 역할로 챗봇이 작동하도록 조정해 보세요.
      </div>
    </div>
  )
}

export default Chatbot;