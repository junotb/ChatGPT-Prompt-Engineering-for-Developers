const Inferring = () => {
  return (
    <div className="flex items-center justify-center w-full h-full p-6">
      <div className="w-full h-full pr-2 overflow-y-scroll">
        다음 동영상은 추론에 관한 것입니다.<br />
        저는 모델이 텍스트를 입력으로 받아 어떤 종류의 분석을 수행하는 작업을 생각하는 것을 좋아합니다.<br />
        이는 레이블 추출, 이름 추출, 텍스트의 감정 이해 등을 포함할 수 있습니다.<br />
        따라서 텍스트의 긍정적 또는 부정적인 감정을 추출하려면, 전통적인 기계 학습 워크플로우에서는 레이블 데이터 세트를 수집하고 모델을 훈련시킨 다음, 모델을 클라우드에 배포하고 추론을 수행해야 합니다.<br />
        이 방법은 꽤 잘 작동할 수 있지만, 그 과정을 거치는 데 많은 작업이 필요합니다.<br />
        또한, 감정 추출, 이름 추출 등과 같은 각 작업마다 별도의 모델을 훈련하고 배포해야 합니다.<br />
        대형 언어 모델의 좋은 점 중 하나는 이러한 많은 작업에 대해 프롬프트를 작성하고 거의 즉시 결과를 생성할 수 있다는 것입니다.<br />
        이는 응용 프로그램 개발 측면에서 엄청난 속도를 제공합니다.<br />
        또한, 여러 가지 다른 작업을 수행하기 위해 여러 모델을 훈련하고 배포하는 대신 하나의 모델, 하나의 API를 사용할 수도 있습니다.<br />
        그럼 이를 활용하는 방법을 보기 위해 코드로 넘어가 보겠습니다.<br />
        여기에는 우리의 일반적인 시작 코드가 있습니다.<br />
        그냥 실행해 보겠습니다.<br />
        가장 적합한 예제로는 램프에 대한 리뷰를 사용하겠습니다.<br />
        &quot;침실용으로 좋은 램프가 필요했는데 이 제품은 추가 저장 공간이 있어서 좋았다&quot; 등의 내용입니다.<br />
        이제 이 리뷰의 감정을 분류하기 위해 프롬프트를 작성해 보겠습니다.<br />
        시스템에게 어떤 감정인지 알려달라고 하려면, &quot;다음 제품 리뷰의 감정은 무엇인가요?&quot;라고 작성하면 됩니다.<br />
        그리고 일반적인 구분자와 리뷰 텍스트 등을 추가하고 실행해 보겠습니다.<br />
        그러면 &quot;제품 리뷰의 감정은 긍정적입니다.&quot;라고 나옵니다.<br />
        실제로 이는 꽤 정확한 것 같습니다.<br />
        이 램프는 완벽하지 않지만, 이 고객은 꽤 만족한 것 같습니다.<br />
        고객과 제품에 관심을 가지는 훌륭한 회사인 것 같습니다.<br />
        긍정적인 감정이 옳은 답인 것 같습니다.<br />
        이제 &quot;제품 리뷰의 감정은 긍정적입니다.&quot;라는 전체 문장이 출력됩니다.<br />
        더 간결한 응답을 제공하여 후속 처리를 쉽게 할 수 있다면, 이 프롬프트에 추가 지시사항을 넣어서 긍정적 또는 부정적인 단어로 답변을 제공할 수 있습니다.<br />
        그래서 이렇게 긍정적으로 출력되어 텍스트 조각이 이 출력을 받아 처리하고 무언가를 수행하기가 더 쉬워집니다.<br />
        다른 프롬프트를 살펴보겠습니다.<br />
        여전히 램프 리뷰를 사용합니다.<br />
        여기에서는 &quot;다음 리뷰의 작성자가 표현하는 감정 목록을 파악하세요.<br />
        이 목록에는 다섯 개 이상의 항목을 포함하지 마세요.&quot;라는 지시사항이 있습니다.<br />
        따라서 대형 언어 모델은 텍스트 조각에서 특정한 것을 추출하는 데 상당히 능숙합니다.<br />
        이 경우, 우리는 감정을 표현하고 있으며, 이는 특정 제품에 대한 고객의 생각을 이해하는 데 유용할 수 있습니다.<br />
        많은 고객 지원 조직에서는 특정 사용자가 극도로 화가 났는지 이해하는 것이 중요합니다.<br />
        따라서 다음과 같은 다른 분류 문제가 있을 수 있습니다.<br />
        &quot;다음 리뷰의 작성자가 화를 표현하고 있습니까?&quot;.<br />
        왜냐하면 누군가가 정말로 화가 나 있다면, 고객 리뷰에 추가로 주의를 기울이고 고객 지원이나 고객 성공팀이 문제를 파악하고 고객을 위해 올바른 조치를 취할 필요가 있을 수 있기 때문입니다.<br />
        이 경우, 고객은 화가 나지 않습니다.<br />
        그리고 지도 학습을 통해 이러한 분류기를 모두 구축하고 싶다면, 이 비디오에서 보았던 몇 분 동안으로는 이를 수행할 수 없습니다.<br />
        이 비디오를 일시 정지하고 이러한 프롬프트 중 일부를 변경해 보세요.<br />
        고객이 기쁨을 표현하고 있는지 묻거나 누락된 부분이 있는지 묻거나 이 램프 리뷰에 대해 다른 추론을 할 수 있는 프롬프트를 만들어 보세요.<br /><br />
        이 시스템으로 할 수 있는 몇 가지 더 보여드릴게요.<br />
        특히 고객 리뷰에서 더 풍부한 정보를 추출하는 것입니다.<br />
        정보 추출은 NLP, 자연어 처리의 일부로, 텍스트 조각을 가져와서 텍스트에서 알고 싶은 특정한 것들을 추출하는 것과 관련이 있습니다.<br />
        이 프롬프트에서는 아래의 항목들, 상품 구매 및 해당 상품을 제작한 회사의 이름을 식별하도록 요청하고 있습니다.<br />
        다시 말하지만, 온라인 쇼핑 전자상거래 웹사이트에서 여러 리뷰를 요약하려는 경우, 아이템이 무엇이었는지, 어떤 회사가 그 아이템을 만들었는지, 긍정적인지 부정적인지를 파악하고, 특정 아이템이나 특정 제조업체에 대한 긍정적 또는 부정적인 감정의 추세를 파악하는 것이 유용할 수 있습니다.<br />
        이 예시에서는 &quot;Item&quot;과 &quot;Brand&quot;를 키로 하는 JSON 객체 형식으로 응답하도록 요청하고 있습니다.<br />
        그래서 이렇게 하면 아이템은 램프이고, 브랜드는 Lumina라고 출력됩니다.<br />
        이 출력을 추가 처리하기 위해 Python 사전에 쉽게 로드할 수 있습니다.<br />
        우리가 살펴본 예시에서는 감정을 인식하고 누군가 화를 내는지 알아내고, 아이템과 브랜드를 추출하는 프롬프트를 작성하는 방법을 보았습니다.<br />
        이 모든 정보를 추출하기 위한 한 가지 방법은 세 개 또는 네 개의 프롬프트를 사용하고 &quot;get_completion&quot;을 세 번이나 네 번 호출하여 한 번에 이러한 다른 정보를 추출하는 것입니다.<br />
        그러나 실제로는 이 모든 정보를 한 번에 추출하기 위해 단일 프롬프트를 작성할 수도 있습니다.<br />
        &quot;다음 항목을 식별하고 감정을 추출하고, 리뷰어가 화를 표현하는지, 구매한 아이템, 제작한 회사&quot;라고 말하고, 여기서 화 값을 불리언 값으로 형식화하도록 지시하겠습니다.<br />
        그리고 이를 실행해보면, 감정은 긍정적이고, 화는 false로 출력됩니다.<br />
        이는 불리언 값으로 출력하도록 요청했기 때문에 따옴표가 없습니다.<br />
        아이템은 &quot;램프 with additional storage&quot;로 추출되었는데, 괜찮습니다.<br />
        이렇게 하면 하나의 단일 프롬프트로 텍스트에서 여러 필드를 추출할 수 있습니다.<br />
        그리고, 여러분은 이를 직접 다양한 변형으로 실험해보거나, 완전히 다른 리뷰를 입력하여 여전히 정확하게 이러한 정보를 추출할 수 있는지 확인해볼 수 있습니다.<br />
        이제, 대형 언어 모델의 멋진 응용 중 하나는 주제를 추론하는 것입니다.<br />
        긴 텍스트가 주어지면, 이 텍스트가 무엇에 대해 이야기하는지, 어떤 주제들이 있는지 알 수 있습니다.<br />
        다음 텍스트에 대해 논의되고 있는 다섯 가지 주제를 결정하도록 이 프롬프트를 사용할 수 있습니다.<br />
        각 항목을 한 개 또는 두 개의 단어로 만들어서, 쉼표로 구분된 목록으로 응답하겠습니다.<br />
        그래서, 우리가 실행하면, 이 기사를 얻을 수 있습니다.<br />
        이 기사는 정부 조사에 관한 것이며, 직장 만족도에 관한 것이며, NASA에 관한 것이며, 등등입니다.<br />
        그래서, 전반적으로 보면, 나쁘지 않은 주제 목록 추출이라고 생각합니다.<br />
        물론, 이 기사에 대해 다섯 가지 주제로 구성된 파이썬 리스트를 얻을 수 있도록 분할할 수도 있습니다.<br />
        그리고 여러 기사를 모아서 주제를 추출하면, 큰 언어 모델을 사용하여 다른 주제로 색인을 만들 수도 있습니다.<br />
        그래서, 약간 다른 주제 목록을 사용해 보겠습니다.<br />
        뉴스 웹사이트라고 가정하고, 우리가 추적하는 주제입니다.<br />
        &quot;NASA, 지방 정부, 공학, 직원 만족도, 연방 정부&quot;라고 말합시다.<br />
        그리고 뉴스 기사에서 이 주제들 중 어떤 것이 다루어졌는지 알아내고 싶다고 가정해 봅시다.<br />
        그래서, 다음과 같은 프롬프트를 사용할 수 있습니다.<br />
        &quot;최종 주제 목록의 각 항목이 아래 텍스트의 주제인지 확인하십시오.<br />
        각 주제에 대해 0 또는 1의 목록으로 답하십시오.&quot; 그래서, 좋습니다.<br />
        이것은 이전과 동일한 이야기 텍스트입니다.<br />
        그래서, 이것은 이야기입니다.<br />
        NASA에 관한 것입니다.<br />
        지방 정부에 관한 것은 아닙니다.<br />
        공학에 관한 것도 아닙니다.<br />
        직원 만족도에 관한 것입니다.<br />
        그리고 연방 정부에 관한 것입니다.<br />
        그래서, 기계 학습에서는 이것을 때때로 &quot;제로샷 학습 알고리즘&quot;이라고 부릅니다.<br />
        왜냐하면 우리는 레이블이 지정된 어떤 훈련 데이터도 제공하지 않았기 때문입니다.<br />
        그리고 프롬프트만으로도 이 뉴스 기사에서 어떤 주제가 다루어졌는지를 결정할 수 있었습니다.<br />
        그래서, 뉴스 알림을 생성하려면, 뉴스를 처리하고, 저는 NASA가 하는 일을 정말 좋아합니다.<br />
        그래서, 이 정보를 사전에 넣을 수 있는 시스템을 구축하고, NASA 뉴스가 나타나면 &quot;경고: 새로운 NASA 이야기!&quot;라고 출력하도록 할 수 있습니다.<br />
        이를 사용하여 어떤 기사든 빠르게 주제를 파악하고, 주제에 NASA가 포함되어 있다면 &quot;경고: 새로운 NASA 이야기!&quot;라고 출력하도록 할 수 있습니다.<br />
        아, 한 가지만.<br />
        저는 여기서 이 주제 사전을 사용했습니다.<br />
        여기서 사용한 프롬프트는 매우 견고하지 않습니다.<br />
        제품 시스템이 필요하다면, 출력을 목록 대신 JSON 형식으로 제공하도록 수정하는 방법을 찾아보는 것이 좋습니다.<br />
        그리고 특정 기사가 NASA에 대한 이야기인지를 더 견고하게 판단할 수 있는 방법을 갖게 될 것입니다.<br />
        그러니, 추론에 대해서는 여기까지입니다.<br />
        그리고 몇 분 안에, 숙련된 기계 학습 개발자에게는 며칠이나 심지어 몇 주가 걸렸을 작업을 추론하기 위한 여러 시스템을 구축할 수 있습니다.<br />
        그래서, 이러한 것들에 대해 매우 흥미롭다고 생각합니다.<br />
        기계 학습에 익숙한 개발자뿐만 아니라 기계 학습에 새로운 사람들에게도 이제 프롬프트를 사용하여 이와 같은 복잡한 자연어 처리 작업에 대한 추론을 빠르게 구축하고 시작할 수 있습니다.<br />
        다음 비디오에서는 큰 언어 모델로 할 수 있는 흥미로운 작업에 대해 계속 이야기하고 &quot;변환&quot;으로 넘어갈 것입니다.<br />
        하나의 텍스트를 다른 텍스트로 변환하는 방법, 예를 들어 다른 언어로 번역하는 방법에 대해 이야기하겠습니다.<br />
        다음 비디오로 넘어가겠습니다.
      </div>
    </div>
  )
}

export default Inferring;