const Iterative = () => {
  return (
    <>
      저는 대형 언어 모델로 애플리케이션을 개발할 때, 처음 시도한 프롬프트를 최종 애플리케이션에 사용한 적이 없다고 생각합니다.<br />
      그러나 이것이 중요한 것은 아닙니다.<br />
      프롬프트를 점진적으로 개선하는 좋은 과정이 있다면, 원하는 작업에 적합한 결과물을 얻을 수 있을 것입니다.<br /><br />
      저는 기계 학습 모델을 훈련시킬 때 거의 첫 번째 시도에서 성공하는 경우가 거의 없다고 말한 적이 있을 것입니다.<br />
      사실, 첫 번째로 훈련시킨 모델이 작동하는 것에 매우 놀랐습니다.<br />
      프롬프트를 사용할 때, 첫 번째 시도에서 작동하는 것의 확률이 조금 더 높을 수도 있지만, 첫 번째 프롬프트가 작동하는 것은 중요하지 않습니다.<br />
      가장 중요한 것은 애플리케이션에 작동하는 프롬프트를 얻기 위한 과정입니다.<br /><br />
      그래서, 코드로 넘어가서 어떻게 점진적으로 프롬프트를 개발할지에 대해 몇 가지 프레임워크를 보여드리겠습니다.<br />
      기계 학습 수업을 들은 적이 있다면, 아이디어를 생각하고 구현하는 다이어그램을 사용한 것을 본 적이 있을 것입니다.<br />
      코드를 작성하고 데이터를 얻어 모델을 훈련시키고, 실험 결과를 얻습니다.<br />
      그리고 그 출력을 확인하고 오류 분석을 수행하여 작동 여부를 확인하고, 문제를 해결하거나 접근 방식을 변경하고, 구현을 변경하고 다시 실험을 반복하여 효과적인 기계 학습 모델을 얻을 수 있습니다.<br />
      기계 학습에 익숙하지 않거나 이 다이어그램을 처음 보는 경우에는 걱정하지 않으셔도 됩니다.<br />
      이 프레젠테이션의 나머지 부분에는 중요하지 않습니다.<br /><br />
      LLM을 사용하여 애플리케이션을 개발하기 위해 프롬프트를 작성할 때, 이 과정은 상당히 유사할 수 있습니다.<br />
      먼저 완료하고자 하는 작업 또는 과제에 대한 아이디어가 있고, 명확하고 구체적인 프롬프트를 작성하는 첫 번째 시도를 할 수 있습니다.<br />
      그리고 실행하여 결과를 확인합니다.<br />
      첫 번째 시도에서 충분히 잘 작동하지 않는 경우, 지시사항이 충분히 명확하지 않았거나 알고리즘에 충분한 시간을 주지 않았기 때문에 발생한 이유를 찾아내고 아이디어와 프롬프트를 개선하는 반복적인 과정을 통해 여러 번 루프를 돌며 애플리케이션에 작동하는 프롬프트를 얻을 수 있습니다.<br /><br />
      이것이 바로 왜 나는 개인적으로 인터넷 기사에 그렇게 관심을 두지 않았는지도 그 이유입니다.<br />
      왜냐하면 아마도 모든 것에 완벽한 프롬프트는 없을 것이라고 생각하기 때문입니다.<br />
      더 중요한 것은 특정 응용 프로그램에 대한 좋은 프롬프트를 개발하기 위한 과정을 가지고 있는 것입니다.<br />
      그래서, 함께 코드로 예를 살펴보겠습니다.<br />
      이전 비디오에서 보았던 시작 코드가 여기 있습니다.<br />
      OpenAI를 가져오고, OS를 가져옵니다.<br />
      여기서 OpenAI API 키를 가져오고, 이것은 마지막에 보았던 동일한 도우미 함수입니다.<br />
      이 비디오에서 실행 예제로 사용할 것은 의자에 대한 요약 사항입니다.<br />
      그래서, 여기에 그것을 붙여넣겠습니다.<br />
      이것을 더 자세히 읽고 싶다면 왼쪽 노트북에서 비디오를 일시 중지하고 주의 깊게 읽으십시오.<br />
      그러나 여기에는 의자에 대한 사실 시트가 있습니다.<br />
      아름다운 미드 센추리 영감을 받은 가족의 일부라고 설명되어 있습니다.<br />
      구조에 대해 이야기하며, 치수, 의자 옵션, 재료 등을 다룹니다.<br />
      이것은 이탈리아에서 온 것입니다.<br />
      그래서, 이 사실 시트를 가져와서 마케팅 팀이 온라인 소매 웹사이트를 위해 설명을 작성하는 데 도움을 주고 싶다고 가정해 봅시다.<br />
      이 세 가지를 빠르게 실행한 다음 다음과 같은 프롬프트를 만들어 보겠습니다.<br />
      그리고 이것을 붙여넣겠습니다.<br />
      그래서 여기 나의 프롬프트는 다음과 같이 말합니다.<br />
      &quot;당신의 임무는 기술적인 사실 시트를 기반으로 한 제품에 대한 소매 웹사이트 설명을 작성하는 마케팅 팀을 돕는 것입니다.&quot; 이것은 나에게 큰 언어 모델에게 작업을 설명하는 첫 번째 시도입니다.<br />
      그래서 shift-enter를 누르면 몇 초 동안 실행되고 결과를 얻습니다.<br />
      이것은 제품에 대한 설명을 잘 작성한 것 같습니다.<br />
      아름다운 미드 센추리 영감을 받은 사무용 의자를 소개하는 등의 내용이 포함되어 있습니다.<br />
      그러나 이를 보면, 이것은 정말 길다고 생각합니다.<br />
      정확히 요청한 대로 기술적인 사실 시트에서 제품 설명을 작성하는 것을 잘 수행했습니다.<br />
      그러나 이를 보면, 이것은 다소 길다고 생각합니다.<br />
      아마 우리는 조금 더 짧게 원할지도 모릅니다.<br />
      그래서, 나는 아이디어를 가지고 프롬프트를 작성하고 결과를 얻었습니다.<br />
      그러나 나는 그것에 만족하지 않기 때문에 너무 길다고 생각합니다.<br />
      그래서, 나는 프롬프트를 명확히하고 이를 통해 원하는 길이에 대한 더 나은 지침을 주기 위해 최대 50단어를 사용하도록 말할 것입니다.<br />
      그리고 다시 실행해 보겠습니다.<br />
      이것은 실제로 제품에 대한 훨씬 더 좋은 짧은 설명인 것 같습니다.<br />
      미드 센추리 영감을 받은 사무용 의자를 소개하는 등의 내용이 포함되어 있습니다.<br />
      스타일리시하면서도 실용적입니다.<br />
      나쁘지 않아요.<br />
      그리고 이것의 길이를 다시 한 번 확인해 보겠습니다.<br />
      그래서, 응답을 공백으로 나누고, 길이를 출력하겠습니다.<br />
      그래서 52단어입니다.<br />
      실제로 나쁘지 않습니다.<br />
      큰 언어 모델은 매우 정확한 단어 수에 대한 지시사항을 따르는 데는 그리 좋지 않지만, 이것은 실제로 나쁘지 않습니다.<br />
      때로는 60개나 65개의 단어로 된 내용을 출력하기도 하지만, 그런 내용도 어느 정도 합리적입니다.<br />
      시도해볼 수 있는 몇 가지 방법은 최대 세 문장을 사용하도록 말하는 것입니다.<br />
      다시 한 번 실행해 보겠습니다.<br />
      하지만 이는 출력하려는 결과의 길이를 지정하는 다른 방법들입니다.<br />
      그래서 이것은 1, 2, 3, 세 문장이 있습니다.<br />
      제가 꽤 잘 한 것 같습니다.<br />
      그리고 가끔 사람들이 이런 식으로도 할 때가 있습니다.<br />
      알아봐야 할 것은, 최대 280자를 사용하는 것입니다.<br />
      대형 언어 모델은 텍스트를 해석하는 방식 때문에, 토크나이저라고 불리는 것을 사용하는데, 이는 이야기하지 않겠습니다.<br />
      하지만 문자 수를 세는 데는 그렇게 좋지 않습니다.<br />
      그런데 한 번 보겠습니다.<br />
      281자입니다.<br />
      실제로 놀랍게도 아주 가까운 결과입니다.<br />
      일반적으로 대형 언어 모델은 이 정도로 정확하지 않습니다.<br />
      하지만 이는 출력의 길이를 제어하기 위해 사용할 수 있는 다른 방법들입니다.<br />
      하지만 다시 최대 50단어로 변경해 보겠습니다.<br />
      그리고 방금 전의 결과가 있습니다.<br />
      웹사이트에 대한 이 텍스트를 계속해서 다듬어 나갈 때, 아마도 이 웹사이트는 소비자에게 직접 판매하는 것이 아니라 가구 소매업자에게 가구를 판매하는 것을 목적으로 한다는 것을 알 수 있습니다.<br />
      이 경우, 이 프롬프트를 가져와서 기술적인 세부 사항에 대해 더 정확하게 수정하고 싶을 수 있습니다.<br />
      그래서 이 프롬프트를 계속 수정해 보겠습니다.<br />
      그리고 이렇게 말하겠습니다.<br />
      이 설명은 가구 소매업자를 위해 작성되었으므로 기술적이어야 하며, 소재, 제품 및 구성 요소에 초점을 맞추어야 합니다.<br />
      그러니 실행해 보겠습니다.<br />
      그리고 보겠습니다.<br />
      나쁘지 않습니다.<br />
      코팅된 알루미늄 베이스와 공기압 의자, 고품질 소재에 대해 언급합니다.<br />
      그래서 프롬프트를 변경함으로써 원하는 특정 특성에 더 초점을 맞출 수 있습니다.<br />
      이를 보면, 설명의 끝에 제품 ID도 포함하고 싶다고 생각할 수 있습니다.<br />
      그래서 이 의자의 두 가지 상품 ID인 SWC 110, SWC 100도 언급하고 싶습니다.<br />
      그래서 이 프롬프트를 더 개선해 볼 수 있습니다.<br />
      제품 ID를 얻기 위해 이 설명의 끝에 다음과 같은 지시사항을 추가할 수 있습니다.<br />
      기술 사양에는 7자리 제품 ID를 모두 포함하십시오.<br />
      그리고 실행해 보겠습니다.<br />
      그래서, 이렇게 말합니다.<br />
      Miss Agents 5 사무용 의자를 소개합니다.<br />
      셸 색상에 대해 이야기하고, 플라스틱 코팅, 알루미늄 베이스, 실용적인 몇 가지 옵션에 대해 이야기합니다.<br />
      두 가지 제품 ID에 대해 이야기합니다.<br />
      그래서 이는 꽤 좋아 보입니다.<br />
      여기서 보여준 것은 많은 개발자들이 거치는 반복적인 프롬프트 개발의 짧은 예입니다.<br />
      그리고 나는 지난 비디오에서 Isa가 여러 가지 모범 사례를 공유한 것을 보았습니다.<br />
      그래서 나는 일반적으로 그런 모범 사례를 염두에 두고 명확하고 구체적으로 작성하며, 필요한 경우 모델이 생각할 시간을 주는 것입니다.<br />
      그런 생각을 가지고 처음에 프롬프트를 작성해 보고, 그 후에 필요한 결과에 점점 가까워지도록 반복적으로 프롬프트를 다듬는 것은 가치가 있습니다.<br />
      그래서 다양한 프로그램에서 사용되는 성공적인 프롬프트들은 이와 같은 반복적인 과정을 통해 도출되었습니다.<br />
      재미로 한 번 보여줄까요? chatGPT가 할 수 있는 더 복잡한 프롬프트의 예를 보여드릴게요.<br />
      여기에 몇 가지 추가 지시사항을 추가했습니다.<br />
      설명 뒤에 제품 크기를 나타내는 테이블을 포함하고, 그리고 모든 것을 HTML 형식으로 포맷하십시오.<br />
      그래서 실행해 보겠습니다.<br /><br />
      실제로는, 이렇게 복잡한 프롬프트를 얻는 것은 여러 번의 반복을 거쳐야 합니다.<br />
      아무도 이런 정확한 프롬프트를 처음 시도할 때 작성하지 않을 것이라고 생각합니다.<br />
      그래서 이는 실제로 HTML의 많은 출력을 생성합니다.<br />
      이 HTML을 표시하여 유효한 HTML인지 확인하고 작동하는지 확인해 보겠습니다.<br />
      실제로 작동할지는 모르겠지만, 확인해 보겠습니다.<br />
      오, 멋지네요.<br />
      잘 렌더링된 것 같습니다.<br />
      그래서 의자의 설명, 구성, 소재, 제품 크기에 대한 아주 멋진 설명이 있습니다.<br /><br />
      이 글은 최대 50단어를 사용하는 지시사항을 빼먹은 것 같습니다.<br />
      그래서 조금 길지만, 원한다면 비디오를 일시정지하고 더 간결하게 요약하도록 지시하고 결과를 확인해보세요.<br />
      이 비디오에서 얻을 수 있는 것은 프롬프트 개발이 반복적인 과정임을 알 수 있다는 것입니다.<br />
      무언가를 시도하고, 원하는 대로 완벽하게 이루어지지 않는다면, 지시사항을 명확하게 하거나 더 생각할 공간을 주어 원하는 결과에 더 가깝게 만들 수 있도록 생각해보세요.<br />
      효과적인 프롬프트 엔지니어가 되기 위한 핵심은 완벽한 프롬프트를 알고 있는 것보다는 애플리케이션에 효과적인 프롬프트를 개발하기 위한 좋은 과정을 가지고 있는 것입니다.<br />
      이 비디오에서는 한 가지 예를 사용하여 프롬프트를 개발하는 과정을 보여주었습니다.<br />
      더 복잡한 애플리케이션의 경우, 몇 개의 예시가 아닌 10개, 50개 또는 100개의 사실 시트 목록을 사용하여 프롬프트를 반복적으로 개발하고 평가할 수도 있습니다.<br />
      그러나 대부분의 애플리케이션의 초기 개발 단계에서는 저처럼 한 가지 예시만 사용하여 개발하는 경우가 많습니다.<br />
      그러나 보다 성숙한 애플리케이션의 경우, 종종 더 많은 예시를 사용하여 프롬프트를 평가하는 것이 유용할 수 있습니다.<br />
      예를 들어, 수십 개의 사실 시트에 대해 다양한 프롬프트를 테스트하여 평균 또는 최악의 경우의 성능을 확인할 수 있습니다.<br />
      그러나 일반적으로 애플리케이션이 더 성숙해지고 프롬프트 개선의 마지막 몇 단계를 진행해야 할 때에만 이를 수행하게 됩니다.<br />
      그래서 Jupyter Code 노트북 예제를 사용하여 다양한 변형을 시도하고 결과를 확인해보세요.<br />
      완료되면 다음 비디오로 넘어가서 소프트웨어 애플리케이션에서 대형 언어 모델의 일반적인 사용 중 하나인 텍스트 요약에 대해 이야기하겠습니다.<br />
      준비되셨다면 다음 비디오로 이동해주세요.
    </>
  )
}

export default Iterative;